worker_processes 1;

events {
    worker_connections  1024;
}


http {
    upstream database {
        include db-credentials.conf;
    }

    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        charset utf-8;

        location / {
            root   /home/rtfeldman/code/nginx-postgres-example/static;
            index  index.html;
        }


        location = /profile/ {
            postgres_pass     database;
            rds_json          on;

            postgres_query    HEAD GET  "SELECT * FROM public.user";
            postgres_rewrite  HEAD GET no_rows 403;

        }

        location = /users {
            default_type 'application/json';

            content_by_lua_block {
              local cjson = require("cjson")
              local pgmoon = require("pgmoon")
              local db_credentials = require("db_credentials")

              ngx.req.read_body()

              local user = cjson.decode(ngx.req.get_body_data()).user

              local pg = pgmoon.new(db_credentials)
              assert(pg:connect())

              pg:query("CALL register_user(" 
                .. pg:escape_literal(user.username)
                .. ","
                .. pg:escape_literal(user.email) 
                .. ","
                .. pg:escape_literal(user.password)
                .. ");"
              )

              ngx.say('text: ' .. pg:escape_literal(user.username))

              pg:keepalive()
              pg = nil
            }

            # postgres_query POST "CALL register_user($username_escaped, $email_escaped, $pw_escaped);";
            # postgres_rewrite POST no_changes 201;
        }

        location = /hello {
            default_type 'text/plain';

            content_by_lua_block {
              local cjson = require("cjson")
              local pgmoon = require("pgmoon")

              local pg = pgmoon.new({ database = "webapp", user = "postgres", password = "SuperSecure" })
              assert(pg:connect())

              local results = pg:query("SELECT * FROM public.user")

              pg:keepalive()
              pg = nil

              ngx.say(cjson.encode(results))
            }
        }
    }
}
